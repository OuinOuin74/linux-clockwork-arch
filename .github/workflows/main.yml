name: Build uConsole kernels (CM4 & CM5)

on:
  push:
    paths:
      - 'PKGBUILD'
      - '*.zip'
      - '*.preset'
      - 'config.txt'
      - 'cmdline.txt'
  pull_request:
    paths:
      - 'PKGBUILD'
      - '*.zip'
      - '*.preset'
      - 'config.txt'
      - 'cmdline.txt'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        model: [cm4, cm5]   # Two builds: MODEL=cm4 and MODEL=cm5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # If blobs are in Git LFS, enable this
          lfs: true

      - name: Enable QEMU for arm64 containers
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build with makepkg inside Arch aarch64
        uses: uraimo/run-on-arch-action@v2.7.2
        with:
          arch: aarch64
          distro: archlinux_latest
          # Mount the repo into the ARM container at /work
          dockerRunArgs: |
            -v ${{ github.workspace }}:/work
          githubToken: ${{ github.token }}
          setup: |
            # Refresh keyring early to avoid signature issues
            pacman -Sy --noconfirm archlinux-keyring
            # Fully update and install build deps (NO AUR, NO yay)
            pacman -Syu --noconfirm base-devel git ccache unzip bsdtar bc flex bison pahole inetutils kmod util-linux which
            # Create an unprivileged build user for makepkg
            useradd -m build
            echo 'build ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/build
            chown -R build:build /work
          run: |
            set -euxo pipefail
            cd /work
            # Use ccache if present
            export CCACHE_DIR=/work/.ccache
            mkdir -p "$CCACHE_DIR"
            # Build (reads your MODEL in PKGBUILD)
            sudo -u build env MODEL=${{ matrix.model }} makepkg -sc --noconfirm
            # Collect artifacts in a per-model directory
            mkdir -p /work/out/${{ matrix.model }}
            mv ./*.pkg.tar.* /work/out/${{ matrix.model }}/ || true
            # Keep a simple log for each build (optional)
            : > /work/out/${{ matrix.model }}/build-${{ matrix.model }}.log

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.model }}-packages
          path: |
            out/${{ matrix.model }}/*.pkg.tar.*
            out/${{ matrix.model }}/*.log
